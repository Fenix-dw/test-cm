openapi: 3.0.3
info:
  title: Comments API
  description: API for managing comments and user login.
  version: 1.0.0

servers:
  - url: http://localhost/api

paths:
  /login:
    post:
      summary: User login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: secret123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: token
        '401':
          description: Unauthorized
  /logout:
    post:
      summary: User logout
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out

  /news/{newsId}/comments:
    get:
      summary: List comments for a news item
      tags:
        - Comments
      parameters:
        - name: newsId
          in: path
          required: true
          schema:
            type: integer
        - name: filter[text]
          in: query
          schema:
            type: string
        - name: filter[user.name]
          in: query
          schema:
            type: string
        - name: filter[user.id]
          in: query
          schema:
            type: string
        - name: filter[user.email]
          in: query
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
    post:
      summary: Create a comment on a news item
      tags:
        - Comments
      parameters:
        - name: newsId
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  example: This is a test comment.
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /comments/{commentId}:
    get:
      summary: Get a comment by ID
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    put:
      summary: Update a comment
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  example: Updated comment text.
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
    delete:
      summary: Delete a comment
      tags:
        - Comments
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Comment deleted
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email

    Comment:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        commentable_type:
          type: string
        commentable_id:
          type: integer
        text:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
